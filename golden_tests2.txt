1,58
{ fn = lambda (i:int) { return 26 * i; }; j: int = fn(3); if (j == 78) { return true; } return false; }
{
fn
=
lambda
(
i
:
int
)
{
return
26
*
i
;
}
;
j
:
int
=
fn
(
3
)
;
if
(
j
==
78
)
{
return
true
;
}
return
false
;
}

Parsing worked!
{
BinaryExp{Assignment,VariableExp{index:1,type:Lambda{Atom{Integer},Atom{Integer}}},LambdaExpression{VariableExp{index:2,type:Atom{Integer}},{
return BinaryExp{Multiply,LiteralExp{26,type:Atom{Integer}},VariableExp{index:2,type:Atom{Integer}},type:Atom{Integer}};
}
,type:Lambda{Atom{Integer},Atom{Integer}}},type:Lambda{Atom{Integer},Atom{Integer}}};
BinaryExp{Assignment,VariableExp{index:2,type:Atom{Integer}},BinaryExp{FunctionCall,VariableExp{index:1,type:Lambda{Atom{Integer},Atom{Integer}}},LiteralExp{3,type:Atom{Integer}},type:Atom{Integer}},type:Atom{Integer}};
if (BinaryExp{Equals,VariableExp{index:2,type:Atom{Integer}},LiteralExp{78,type:Atom{Integer}},type:Atom{Boolean}})
{
return LiteralExp{true,type:Atom{Boolean}};
}
return LiteralExp{false,type:Atom{Boolean}};
}

41 tokens parsed.
There were 0 errors.
1,14
{ 3 + 4; }
{
3
+
4
;
}

Parsing worked!
{
BinaryExp{Add,LiteralExp{3,type:Atom{Integer}},LiteralExp{4,type:Atom{Integer}},type:Atom{Integer}};
}

6 tokens parsed.
There were 0 errors.
